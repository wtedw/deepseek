<!-- livebook:{"persist_outputs":true} -->

# Finetuning DeepSeek w/ LoRA

```elixir
Mix.install([
  {:bumblebee, "~> 0.4.2", git: "https://github.com/elixir-nx/bumblebee"},
  {:axon, "~> 0.6.0"},
  {:polaris, git: "https://github.com/wtedw/polaris.git", override: true},
  {:nx, "~> 0.6.4", override: true},
  {:exla, "~> 0.6.4"},
  {:lorax, git: "https://github.com/wtedw/lorax.git"},
  {:req, "~> 0.4.0"},
  {:kino, "~> 0.11.3"}
])

Nx.default_backend(EXLA.Backend)
```

## Hyperparameters

```elixir
batch_size = 2
sequence_length = 512
r = 4
lora_alpha = 8
lora_dropout = 0.05

:ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Introduction

The setup is almost identical to the fine-tuning guides in Bumblebee and in Lorax

1. https://hexdocs.pm/bumblebee/fine_tuning.html
2. https://hexdocs.pm/lorax/finetuning_gpt_with_lora.html

The main changes are

1. Pulling in the latest Bumblebee for some extra Llama architecture support https://github.com/elixir-nx/bumblebee/pull/285
2. We'll be using a forked version of Polaris (optimizer library) that doesn't store frozen tensors on the GPU https://github.com/wtedw/polaris

## Load a model

```elixir
repo = {:hf, "deepseek-ai/deepseek-coder-1.3b-base"}

{:ok, model_info} = Bumblebee.load_model(repo)

{:ok, tokenizer} =
  Bumblebee.load_tokenizer(
    {:hf, "deepseek-ai/deepseek-coder-1.3b-base",
     revision: "e94f2b11bc28abbd67ecadfaad058c30b24a589f"}
  )

{:ok, generation_config} = Bumblebee.load_generation_config(repo)

:ok
```

<!-- livebook:{"output":true} -->

```

11:49:43.186 [info] TfrtCpuClient created.

```

<!-- livebook:{"output":true} -->

```
:ok
```

## Prepare a dataset

This is just some dummy text data. We'll need to pull in the Elixir dataset mentioned in Slack. Then, add the fill-in-the-middle tokens, permutate the data, then apply tokenizer.

```elixir
# text = Kino.Input.textarea("Text Data")
text =
  Req.get!("https://raw.githubusercontent.com/wtedw/lorax/main/data/elixir-discussion.txt").body

:ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

We can split our training data, but, I don't do  this normally because there was some bug in Axon.Loop. It would  occassionally crash or just not work. I forget the details.

```elixir
tokenized_text = %{"input_ids" => input_ids} = Bumblebee.apply_tokenizer(tokenizer, text)
n_tokens = Nx.size(input_ids)
n_train = round(n_tokens * 0.9)
n_val = n_tokens - n_train

train_data =
  for {input_key, tokenized_values} <- tokenized_text, into: %{} do
    {input_key, Nx.slice_along_axis(tokenized_values, 0, n_train, axis: -1)}
  end

test_data =
  for {input_key, tokenized_values} <- tokenized_text, into: %{} do
    {input_key, Nx.slice_along_axis(tokenized_values, n_train, n_val, axis: -1)}
  end
```

<!-- livebook:{"output":true} -->

```
%{
  "attention_mask" => #Nx.Tensor<
    u32[1][405764]
    EXLA.Backend<host:0, 0.1761148551.2173042700.44499>
    [
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...]
    ]
  >,
  "input_ids" => #Nx.Tensor<
    u32[1][405764]
    EXLA.Backend<host:0, 0.1761148551.2173042700.44500>
    [
      [185, 185, 40, 486, 76, 5759, 280, 23636, 245, 15881, 2087, 1603, 14, 5977, 6418, 3601, 3320, 833, 8166, 12, 866, 19318, 275, 2370, 83, 365, 1466, 681, 348, 13, 185, 546, 2119, 317, 344, 11, 1317, 2664, 317, 3255, 699, 1372, 3320, 331, 699, 4863, 13, 2074, ...]
    ]
  >,
  "token_type_ids" => #Nx.Tensor<
    u32[1][405764]
    EXLA.Backend<host:0, 0.1761148551.2173042700.44501>
    [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]
    ]
  >
}
```

```elixir
defmodule DataStream do
  def get_batch_stream(%{"input_ids" => input_ids} = data, batch_size, block_size, opts \\ []) do
    seed = Keyword.get(opts, :seed, 1337)

    Stream.resource(
      # initialization function
      fn ->
        Nx.Random.key(seed)
      end,
      # generation function
      fn key ->
        {_b, t} = Nx.shape(input_ids)

        data =
          for {k, v} <- data, into: %{} do
            {k, Nx.reshape(v, {t})}
          end

        # ix = list of random starting indices
        {ix, new_key} =
          Nx.Random.randint(key, 0, t - block_size, shape: {batch_size}, type: :u32)

        ix = Nx.to_list(ix)

        # x is map of sliced tensors
        x =
          for {k, tensor} <- data, into: %{} do
            batch_slice =
              ix
              |> Enum.map(fn i -> Nx.slice_along_axis(tensor, i, block_size, axis: -1) end)
              |> Nx.stack()

            {k, batch_slice}
          end

        # y represents all the predicted next tokens (input_ids shifted by 1) 
        y =
          ix
          |> Enum.map(fn i ->
            data["input_ids"] |> Nx.slice_along_axis(i + 1, block_size, axis: -1)
          end)
          |> Nx.stack()
          |> Nx.flatten()

        out_data = {x, y}

        {[out_data], new_key}
      end,
      fn _ -> :ok end
    )
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, DataStream, <<70, 79, 82, 49, 0, 0, 16, ...>>, {:get_batch_stream, 4}}
```

You can see what a single batch looks like by grabbing 1 from the stream:

```elixir
train_batch_stream = DataStream.get_batch_stream(train_data, batch_size, sequence_length)
test_batch_stream = DataStream.get_batch_stream(test_data, batch_size, sequence_length)

[{x, y}] = train_batch_stream |> Enum.take(1)
[{x_val, y_val}] = test_batch_stream |> Enum.take(1)

Bumblebee.Tokenizer.decode(tokenizer, x["input_ids"]) |> IO.inspect()
IO.puts("=====")
Bumblebee.Tokenizer.decode(tokenizer, y) |> IO.inspect()

:ok
```

<!-- livebook:{"output":true} -->

```
[" following shows atom, atom(:key), atom(:value), atom(:small), atom(:tiny)String additionally supports :explicit, which may be useful if you want to illustrate String.graphemes() or something similar. Strings can also be accessed by just \"\" (and thus \":key\" and so on.)\nCollections\nAt the moment there’s only map, struct, list, and tuple:\nThese can alternatively be accessed by %{n}, %x{n}, [n], and {n}.\nCollections with 0…5 elements can be generated by list(0)…list(5) (or []…[5]):\nThey also support :tiny and :value. So struct(:tiny) and {value} becomes\nList variant\nLists have an entirely different variant, accessible from list_horizontal, which accepts the same arguments. Thus… list_horizontal(0), list_horizontal(3), list_horizontal(5) gives:\nComposing diagrams\nProvided the font-sizes are the same, the objects composes seamlessly. For example, our IEx example of a map from above can be drawn by typing %{2}, atom(key), \"value\", integer(value):\n…and just moved together. Add some normal textbox and you then get:\nThe :tiny variant fits inside the horizontal list boxes.\nWhat’s next?\nMy immediate goal is a set of components including functions / pipelines, all the regular data-types, and perhaps pictures for concepts like module, token, and macro. I hope this would help visualize the language part of Elixir.\nA little further away — and this depends on us successfully rip-and-rebuild the font-construction — is an exact copy of the above, but in isometric. This would then enable visualizing things that occur / interact at different layers. (You’d specify something in isometric by selecting a font-variant, like how you’d toggle Italics and bold.)\nFurther further out are OTP concepts, and expanding the vocabulary to be able to talk about database / Ecto / Ash, and Phoenix / LV. The problem here is that I’m very much a newbie tinkerer, with an incomplete view of the landscape. Your feedback would be much welcomed.\n17 Likes\n\n<likes>17 likes</likes>",
 "/likes>\n\n<author>konstantine</author>\n\nHenrique F. Teixeira:\nIMO expressiveness are very very very important thing while modeling business rules. And “it’s a thing” work with a language that not few like you are hiting your head in your keyboard writing a code thats seems like visual noise. That. The practicality and aesthetics of Elixir code.\n\n<likes>0 likes</likes>\n\n<author>sasajuric</author>\n\nYou raised some valid points, and I can see how various issues combined can lead to frustration. I’ve been using BEAM languages for the past decade, and while I’m in general a happy user, I agree that there’s a lot of room for improvement In particular, I think that the lack of strong typing is a big deficiency, and I’m hoping that some of the ongoing initiatives will address this. If projects such as Gleam reach enough maturity I could see myself migrating to them, at least partially.\nI also agree that ecosystem is far from perfect, in terms of size, as well as support. It is indeed worrying that some of the prominent libraries are developed as a private effort of a few individuals, with lot of the work probably done outside of working hours.\nAll that being said, I’m still in general a very happy user of BEAM languages, and I believe that they are by far the most suitable options for building fault-tolerant soft real-time backends of any size and complexity. Projects such as WhatsApp have demonstrated that BEAM can take us very far, but at the same time, in my experience BEAM languages, especially Elixir, excel at building small scale simpler systems. I’ve worked on a couple of such systems which were implemented completely in a single BEAM language, as a single project, running as a single standalone OS process in production, requiring no external dependency at all. One interesting example was a proprietary CI server, a sort of hard-coded Circle/Travis/Jenkins, which had to deal with all of the standard CI challenges, such as monitoring changes in a remote repo, running multiple concurrent builds, managing load and concurrency, dealing with docker containers, caching, running scheduled jobs, persisting state, etc. All of"]
=====
" shows atom, atom(:key), atom(:value), atom(:small), atom(:tiny)String additionally supports :explicit, which may be useful if you want to illustrate String.graphemes() or something similar. Strings can also be accessed by just \"\" (and thus \":key\" and so on.)\nCollections\nAt the moment there’s only map, struct, list, and tuple:\nThese can alternatively be accessed by %{n}, %x{n}, [n], and {n}.\nCollections with 0…5 elements can be generated by list(0)…list(5) (or []…[5]):\nThey also support :tiny and :value. So struct(:tiny) and {value} becomes\nList variant\nLists have an entirely different variant, accessible from list_horizontal, which accepts the same arguments. Thus… list_horizontal(0), list_horizontal(3), list_horizontal(5) gives:\nComposing diagrams\nProvided the font-sizes are the same, the objects composes seamlessly. For example, our IEx example of a map from above can be drawn by typing %{2}, atom(key), \"value\", integer(value):\n…and just moved together. Add some normal textbox and you then get:\nThe :tiny variant fits inside the horizontal list boxes.\nWhat’s next?\nMy immediate goal is a set of components including functions / pipelines, all the regular data-types, and perhaps pictures for concepts like module, token, and macro. I hope this would help visualize the language part of Elixir.\nA little further away — and this depends on us successfully rip-and-rebuild the font-construction — is an exact copy of the above, but in isometric. This would then enable visualizing things that occur / interact at different layers. (You’d specify something in isometric by selecting a font-variant, like how you’d toggle Italics and bold.)\nFurther further out are OTP concepts, and expanding the vocabulary to be able to talk about database / Ecto / Ash, and Phoenix / LV. The problem here is that I’m very much a newbie tinkerer, with an incomplete view of the landscape. Your feedback would be much welcomed.\n17 Likes\n\n<likes>17 likes</likes>\nlikes>\n\n<author>konstantine</author>\n\nHenrique F. Teixeira:\nIMO expressiveness are very very very important thing while modeling business rules. And “it’s a thing” work with a language that not few like you are hiting your head in your keyboard writing a code thats seems like visual noise. That. The practicality and aesthetics of Elixir code.\n\n<likes>0 likes</likes>\n\n<author>sasajuric</author>\n\nYou raised some valid points, and I can see how various issues combined can lead to frustration. I’ve been using BEAM languages for the past decade, and while I’m in general a happy user, I agree that there’s a lot of room for improvement In particular, I think that the lack of strong typing is a big deficiency, and I’m hoping that some of the ongoing initiatives will address this. If projects such as Gleam reach enough maturity I could see myself migrating to them, at least partially.\nI also agree that ecosystem is far from perfect, in terms of size, as well as support. It is indeed worrying that some of the prominent libraries are developed as a private effort of a few individuals, with lot of the work probably done outside of working hours.\nAll that being said, I’m still in general a very happy user of BEAM languages, and I believe that they are by far the most suitable options for building fault-tolerant soft real-time backends of any size and complexity. Projects such as WhatsApp have demonstrated that BEAM can take us very far, but at the same time, in my experience BEAM languages, especially Elixir, excel at building small scale simpler systems. I’ve worked on a couple of such systems which were implemented completely in a single BEAM language, as a single project, running as a single standalone OS process in production, requiring no external dependency at all. One interesting example was a proprietary CI server, a sort of hard-coded Circle/Travis/Jenkins, which had to deal with all of the standard CI challenges, such as monitoring changes in a remote repo, running multiple concurrent builds, managing load and concurrency, dealing with docker containers, caching, running scheduled jobs, persisting state" <> ...
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Train the model

```elixir
%{model: model, params: params} = model_info

model
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"attention_head_mask" => {24, 16}, "attention_mask" => {nil, nil}, "cache" => nil, "input_embeddings" => {nil, nil, 2048}, "input_ids" => {nil, nil}, "position_ids" => {nil, nil}}
  outputs: "container_96"
  nodes: 1765
>
```

The Axon model actually outputs a map with `:logits`, `:hidden_states`, and `:attentions`. You can see this by using `Axon.get_output_shape/2` with an input. This method symbolically executes the graph and gets the resulting shapes:

```elixir
[{input, _}] = Enum.take(train_batch_stream, 1)
Axon.get_output_shape(model, input)
```

<!-- livebook:{"output":true} -->

```
%{
  cache: #Axon.None<...>,
  logits: {2, 512, 32256},
  hidden_states: #Axon.None<...>,
  attentions: #Axon.None<...>
}
```

For training LoRA adapters, we'll freeze the original layers, and append adapters to our target nodes

```elixir
lora_model =
  model
  |> Axon.freeze()
  |> Lorax.inject(%Lorax.Config{
    r: r,
    alpha: lora_alpha,
    dropout: lora_dropout,
    target_key: true,
    target_query: true,
    target_value: true
  })
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"attention_head_mask" => {24, 16}, "attention_mask" => {nil, nil}, "cache" => nil, "input_embeddings" => {nil, nil, 2048}, "input_ids" => {nil, nil}, "position_ids" => {nil, nil}}
  outputs: "container_96"
  nodes: 1837
>
```

I define a custom optimizer that formats the training state so Polaris won't create frozen tensors on the GPU. Still working on this, I forgot a little bit of what I was doing. Overall, we should be using less vRAM.

I'm also looking into the warnings. I fixed it before, think it has to do with new LoRA params not having the same tensor float type as the original params.

```elixir
defmodule CommonTrain do
  import Nx.Defn

  defn custom_predict_fn(model_predict_fn, params, input) do
    %{prediction: preds} = out = model_predict_fn.(params, input)

    # Output of GPT2 model is a map containing logits and other tensors
    logits = preds.logits

    {b, t, c} = Nx.shape(logits)
    reshaped = Nx.reshape(logits, {b * t, c})
    %{out | prediction: reshaped}
  end

  def custom_loss_fn(y_true, y_pred) do
    Axon.Losses.categorical_cross_entropy(y_true, y_pred,
      from_logits: true,
      sparse: true,
      reduction: :mean
    )
  end

  def custom_optimizer({init_fn, update_fn} = _optimizer, og_keys) do
    wrapper_init_fn = fn model_state ->
      model_state = model_state |> Map.drop(og_keys)
      init_fn.(model_state)
    end

    wrapper_update_fn = fn gradients, optimizer_state, model_state ->
      gradients = gradients |> Map.drop(og_keys)
      {scale, %{mu: mu, nu: nu}} = optimizer_state
      model_state = model_state |> Map.drop(og_keys)
      {t1, t2} = update_fn.(gradients, optimizer_state, model_state)

      IO.inspect(mu |> Map.keys())
      # IO.inspect(t1, label: "t1 keys")
      IO.puts("####")
      # IO.inspect(t2, label: "t2 keys")

      {t1, t2}
    end

    {wrapper_init_fn, wrapper_update_fn}
  end
end

og_keys = params |> Map.keys()
{init_fn, predict_fn} = Axon.build(lora_model, mode: :train)
custom_predict_fn = &CommonTrain.custom_predict_fn(predict_fn, &1, &2)
custom_loss_fn = &CommonTrain.custom_loss_fn(&1, &2)

custom_optimizer =
  CommonTrain.custom_optimizer(Polaris.Optimizers.adam(learning_rate: 3.0e-4), og_keys)

lora_params =
  {init_fn, custom_predict_fn}
  |> Axon.Loop.trainer(custom_loss_fn, custom_optimizer)
  |> Axon.Loop.run(train_batch_stream, params, epochs: 1, iterations: 1, compiler: EXLA)

:ok
```

<!-- livebook:{"output":true} -->

```
warning: variable "nu" is unused (if the variable is not meant to be used, prefix it with an underscore)
  CS/deepseek/training.livemd#cell:d4atqmyfmlbcupmrx6ovfhaibcoyzz7l:31: CommonTrain.custom_optimizer/2

warning: variable "scale" is unused (if the variable is not meant to be used, prefix it with an underscore)
  CS/deepseek/training.livemd#cell:d4atqmyfmlbcupmrx6ovfhaibcoyzz7l:31: CommonTrain.custom_optimizer/2


11:49:59.238 [debug] Forwarding options: [compiler: EXLA] to JIT compiler

11:49:59.373 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.373 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.373 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.373 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.373 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.374 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.377 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.378 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.379 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.380 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter weight does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts

11:49:59.381 [warning] initial type for parameter kernel does not match policy, consider using Axon.MixedPrecision.cast before passing initial state to model initialization function to avoid type casts
["lora_62", "lora_52", "lora_39", "dropout_26",
 "decoder.blocks.13.self_attention_dropout",
 "decoder.blocks.23.self_attention_dropout", "dropout_28", "lora_63",
 "decoder.blocks.5.self_attention_dropout", "lora_47", "lora_38", "lora_11",
 "lora_31", "decoder.blocks.22.self_attention_dropout", "lora_42", "lora_10",
 "lora_51", "decoder.blocks.11.self_attention_dropout", "lora_70", "lora_49",
 "decoder.blocks.15.self_attention_dropout", "lora_64", "dropout_2",
 "dropout_14", "lora_28", "dropout_32", "dropout_8",
 "decoder.blocks.20.self_attention_dropout",
 "decoder.blocks.1.self_attention_dropout", "lora_13", "lora_20", "lora_7",
 "decoder.blocks.17.self_attention_dropout", "dropout_6", "lora_19",
 "decoder.blocks.2.self_attention_dropout", "lora_5", "dropout_42", "lora_30",
 "decoder.blocks.7.self_attention_dropout", "lora_2", "lora_45", "lora_24",
 "lora_6", "lora_37", "dropout_10", "lora_44", "lora_27", "lora_53", "lora_36",
 ...]
####
Epoch: 0, Batch: 0, loss: 0.0000000
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Download LoRA params

```elixir
lora_params
|> Lorax.Params.filter(params)
|> Lorax.Params.kino_download()
```

## Testing out generation

We need to redefine the `model_info` to pass into `Bumblebee.Text.generation/4`. Other than that, the usual generation code is used

```elixir
lora_model_info = %{model_info | model: lora_model, params: lora_params}

generation_config =
  Bumblebee.configure(generation_config, max_new_tokens: 200)

serving =
  Bumblebee.Text.generation(lora_model_info, tokenizer, generation_config,
    compile: [batch_size: 1, sequence_length: 512],
    stream: true,
    defn_options: [compiler: EXLA, lazy_transfers: :never],
    preallocate_params: true
  )

Kino.start_child({Nx.Serving, name: Deepseek, serving: serving})
```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.3999.0>}
```

````elixir
input_frame = Kino.Frame.new()
output_frame = Kino.Frame.new()
output_frame_content = Kino.Frame.new()

form =
  Kino.Control.form(
    [
      prompt:
        Kino.Input.textarea("",
          monospace: true,
          default: """
          # a recursive fibonacci implementation in elixir
          <fill-me>

          Fibber.fibby(10)
          """
        )
    ],
    submit: "Submit"
  )

Kino.Frame.append(output_frame, Kino.Shorts.markdown("### Output"))
Kino.Frame.append(output_frame, output_frame_content)

Kino.Frame.append(input_frame, Kino.Shorts.markdown("### Input"))
Kino.Frame.append(input_frame, form)

Kino.listen(form, fn event ->
  input_value = event.data.prompt

  [pre, suf] =
    case String.split(input_value, "<fill-me>") do
      [pre, suf] -> [pre, suf]
      _ -> [input_value, ""]
    end

  Kino.Frame.clear(output_frame_content)
  Kino.Frame.append(output_frame_content, Kino.Markdown.new("```elixir\n#{pre}", chunk: true))

  prompt =
    "<｜fim▁begin｜># cell.ex: an elixir livebook cell written in elixir\n#{pre}<｜fim▁hole｜>#{suf}<｜fim▁end｜>"

  {time, _} =
    :timer.tc(fn ->
      Nx.Serving.batched_run(Deepseek, prompt)
      |> Enum.each(fn chunk ->
        Kino.Frame.append(output_frame_content, Kino.Markdown.new(chunk, chunk: true))
      end)
    end)

  Kino.Frame.append(output_frame_content, Kino.Markdown.new("#{suf}\n```", chunk: true))

  Kino.Frame.append(
    output_frame_content,
    Kino.Shorts.markdown("*Completed in #{trunc(time / 1_000)}ms*")
  )
end)

Kino.Layout.grid([input_frame, output_frame], columns: 2, boxed: true)
````
